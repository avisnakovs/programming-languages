;; Programming Languages, Homework 5

#lang racket
(provide (all-defined-out)) ;; so we can put tests in a second file

;; definition of structures for MUPL programs - Do NOT change
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; a closure is not in "source" programs but /is/ a MUPL value; it is what functions evaluate to
(struct closure (env fun) #:transparent) 

;; Problem 1

(define (racketlist->mupllist l)
  (if (null? l)
      (aunit)
      (apair (car l) (racketlist->mupllist (cdr l))))) 

(define (mupllist->racketlist l)
  (if (aunit? l)
      null
      (cons (apair-e1 l) (mupllist->racketlist (apair-e2 l)))))

;; Problem 2

;; lookup a variable in an environment
;; Do NOT change this function
(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))

(define (eval-var e env) (if (var? e) (envlookup env (var-string e)) e))

;; Do NOT change the two cases given to you.  
;; DO add more cases for other kinds of MUPL expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.
(define (eval-under-env e env)
        ; var
  (cond [(var? e)
         (envlookup env (var-string e))]
        ; add
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        ;ifgreater
        [(ifgreater? e)
         (let ([v1 (eval-under-env (ifgreater-e1 e) env)]
               [v2 (eval-under-env (ifgreater-e2 e) env)])
           (if (and (int? v1) (int? v2))
               (if (> (int-num v1) (int-num v2))
                   (eval-under-env (ifgreater-e3 e) env)
                   (eval-under-env (ifgreater-e4 e) env))
               (error "MUPL ifgreater applied to non-number")))]
        ; mlet
        [(mlet? e)
         (let ([val (eval-under-env (mlet-e e) env)])
           (eval-under-env (mlet-body e) (cons (cons (mlet-var e) val) env)))]
        ; int
        [(int? e) e]
        ; call
        [(call? e)
         (let ([cl (eval-var (call-funexp e) env)])
           (print cl)
           (if (not (closure? cl))
               (error "MUPL call applied to non-closure")
               (let* ([fn (eval-under-env (closure-fun cl) env)]
                      [param (eval-under-env (call-actual e) env)]
                      [closureEnv (if (fun-nameopt fn) env (closure-env cl))]
                      [usedEnv (if (not (fun-formal fn)) closureEnv (cons (cons (fun-formal fn) param) closureEnv))])
                 (eval-under-env (fun-body fn) usedEnv))))]
        ; apair
        [(apair? e)
         (let ([v1 (eval-under-env (apair-e1 e) env)]
               [v2 (eval-under-env (apair-e2 e) env)])
           (apair v1 v2))]
        ; fst
        [(fst? e)
         (let ([p (eval-under-env (fst-e e) env)])
           (if (apair? p)
               (apair-e1 p)
               (error "MUPL fst applied to not-apair")))]
        ; snd
        [(snd? e)
         (let ([p (eval-under-env (snd-e e) env)])
           (if (apair? p)
               (apair-e2 p)
               (error "MUPL fst applied to not-apair")))]
        ; isaunit
        [(isaunit? e)
         (let ([exp (eval-under-env (isaunit-e e) env)])
           (if (aunit? exp) (int 1) (int 0)))]
        ; aunit
        [(aunit? e) e]
        ; clusure
        [(closure? e) e]
        [(fun? e) e]
        [#t (error (format "bad MUPL expression: ~v" e))]))

;; Do NOT change
(define (eval-exp e)
  (eval-under-env e null))
        
;; Problem 3

(define (ifaunit e1 e2 e3) (ifgreater (isaunit e1) (int 0) e2 e3))

(define (mlet* lstlst e2) (if (null? lstlst) e2 (mlet (car (car lstlst)) (cdr (car lstlst)) (mlet* (cdr lstlst) e2))))

(define (ifeq e1 e2 e3 e4) (mlet "_x" e1 (mlet "_y" e2 (ifgreater (var "_x") (var "_y") e4 (ifgreater (var "_y") (var "_x") e4 e3)))))

;; Problem 4

;(define mupl-map (fun #f "fn" (fun #f "lst" (ifaunit (var "lst") (aunit) (apair (call (closure '() (var "fn") (fst (var "lst"))))   )))))
;(define mupl-map (mlet "fn" (closure '() (fun #f "a" (call (closure '() (fun #f "b" (add (var "b") (var "b")))) (var "a")))) (var "fn")))

;(define mupl-map (mlet "extFn" (closure '() (fun #f "a" (call (closure '() (fun #f "b" (add (var "b") (var "b")))) (var "a")))) (var "extFn")))

(define mupl-map (closure '() (fun #t "fn" (closure '() (fun #t "e" (call (closure '() (var "fn")) (var "e")))))))
;(call (call (closure '() (fun #t "fn" (closure '() (fun #t "e" (call (closure '() (var "fn")) (var "e")))))) (fun #t "a" (add (var "a") (int 1)))) (int 3))

;(define mupl-map (fun #f "fn" (fun #f "lst" (ifaunit (var "lst") (aunit) (apair (call (closure '() (var "fn") (fst (var "lst"))))   )))))
;(define mupl-map (fun #f "fn" (fun #f "lst" (ifaunit (var "lst") (aunit) (apair (call (closure '() (var "fn") (fst (var "lst")))) )))))
;(define (apply-mupl-list fn mlst) (apply fn (mupllist->racketlist mlst)))
;(define (apply fn lst) (if (null? lst) (aunit) (apair (call (closure '() fn) (car lst)) (apply fn (cdr lst)))))
;(define mupl-map (closure '() (fun #f "fn" (closure '() (fun #f "lst" (apply-mupl-list (var "fn") (var "lst")))))))
;(define (mupl-map fn) (closure '() (fun #f "lst" (apply-mupl-list fn (var "lst")))))
;(define (apply fn lst) (print lst) (ifaunit lst (aunit) (apair (call (closure '() fn) (apair-e1 lst)) (apply fn (apair-e2 lst)))))

(define mupl-mapAddN 
  (mlet "map" mupl-map
        "CHANGE (notice map is now in MUPL scope)"))

;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make
;; auto-grading and peer assessment more difficult, so
;; copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
